name: Create Release 🚀

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build-project:
    name: Build project ✨
    runs-on: ubuntu-latest

    # Enter in project properties here
    env:
      PROJECT_NAME: frogonouts

    strategy:
      fail-fast: false
      matrix:
        unityVersion:
          - 2022.3.4f1
        targetPlatform:         # These are the definitions from: https://docs.unity3d.com/ScriptReference/BuildTarget.html
          - StandaloneOSX       # Build a macOS standalone (Intel 64-bit).
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          - StandaloneLinux64   # Build a Linux 64-bit standalone
          - WebGL               # Build for WebGL

    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # Git LFS
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-${{ matrix.targetPlatform }}-lfs-${{ hashFiles('.lfs-assets-id') }}
          
      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      # Cache
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-
      # Build
      - name: Build project
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          ## Use below variables for Professional Serial
          # UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          # UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          # UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform:  ${{ matrix.targetPlatform }}
          buildName: ${{ env.PROJECT_NAME }}

      # We manually compress the MacOS build, as uploading as an Artifact causes issues on MacOS
      - name: Compress Build (MacOS)
        if: matrix.targetPlatform == 'StandaloneOSX'
        run: |
          pushd build/${{ matrix.targetPlatform }}
          sudo zip -r ${{ env.PROJECT_NAME }}-${{ matrix.targetPlatform }}.zip ./${{ env.PROJECT_NAME }}.app
          popd
          sudo mv build/${{ matrix.targetPlatform }}/${{ env.PROJECT_NAME }}-${{ matrix.targetPlatform }}.zip build/${{ env.PROJECT_NAME }}-${{ matrix.targetPlatform }}.zip

      - name: Compress Build
        if: matrix.targetPlatform != 'StandaloneOSX'
        run: |
          pushd build/${{ matrix.targetPlatform }}
          sudo zip -r ${{ env.PROJECT_NAME }}-${{ matrix.targetPlatform }}.zip ./*
          popd
          sudo mv build/${{ matrix.targetPlatform }}/${{ env.PROJECT_NAME }}-${{ matrix.targetPlatform }}.zip build/${{ env.PROJECT_NAME }}-${{ matrix.targetPlatform }}.zip

      # Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.targetPlatform }}
          path: build/${{ env.PROJECT_NAME }}-${{ matrix.targetPlatform }}.zip

      #Upload to Pages (For WebGL builds)
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@4.1.4
        if: matrix.targetPlatform == 'WebGL'
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: build/WebGL/${{ env.PROJECT_NAME }} # The folder the action should deploy.
      
      - name: Checkout code
        uses: actions/checkout@v3
      # More details on usage here: https://github.com/marketplace/actions/create-release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          prerelease: false
          allowUpdates: true
          tag: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          artifacts: 'build/${{ env.PROJECT_NAME }}-${{ matrix.targetPlatform }}.zip'
          token: ${{ secrets.GITHUB_TOKEN }}